package controller;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import application.FileHandler;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ListView;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import mru.tsc.model.BoardGame;
import mru.tsc.model.Book;
import mru.tsc.model.Figure;
import mru.tsc.model.Item;
import mru.tsc.model.Movie;
import exceptions.EmptyInputException;
import exceptions.NegativeNumberException;
import exceptions.SerialNumberFormatException;
import exceptions.MinBiggerThanMaxException;
import exceptions.NoResultFoundException;
import  exceptions.NotEnoughAvailableCountException;
import application.Main;

public class storeGuiController implements Initializable {

	// homepage variables
	@FXML
	private ListView<String> lvResults;
	@FXML
	private RadioButton selectedSN;
	@FXML
	private RadioButton selectedName;
	@FXML
	private RadioButton selectedType;
	@FXML
	private TextField targetSN;
	@FXML
	private TextField targetName;
	@FXML
	private ComboBox<String> targetType;
	@FXML
	private Button btnSearch;
	@FXML
	private Button btnReset;
	@FXML
	private Button btnClearList;
	@FXML
	private Button btnPurchase;
	@FXML
	private ToggleGroup typeGroup;

	// add items page variables
	@FXML
	private TextField addSN;
	@FXML
	private TextField addName;
	@FXML
	private TextField addPrice;
	@FXML
	private TextField addAvailableCount;
	@FXML
	private TextField addAgeAppropriate;
	@FXML
	private ChoiceBox<String> itemCategoryComboBox;
	@FXML
	private TextField addBrand;
	@FXML
	private ComboBox classificationComboBox;
	@FXML
	private ComboBox<String> figureTypeComboBox;
	@FXML
	private TextField addMinPlayers;
	@FXML
	private TextField addMaxPlayers;
	@FXML
	private TextField addReleaseYear;
	@FXML
	private TextField addRating;
	@FXML
	private TextField addAuthours;
	@FXML
	private TextField addPublication;
	@FXML
	private RadioButton rbFiction;
	@FXML
	private RadioButton rbNonFiction;
	@FXML
	private Button saveBtn;
	@FXML
	private ToggleGroup genreGroup;
	
	// Remove Item
		@FXML
		private ListView<String> RTInventory;
		@FXML
		private TextField RTSNTxt;
		@FXML
		private Button RTSearchBtn;
		@FXML
		private Button RTRemoveBtn;
		
		// Recommendation
		@FXML
		private ChoiceBox GOType;
		@FXML
		private CheckBox ageCB;
		@FXML
		private CheckBox typeCB;
		@FXML
		private CheckBox priceRangeCB;
		@FXML
		private TextField GOAgeTxt;
		@FXML
		private TextField minPriceTxt;
		@FXML
		private TextField maxPriceTxt;
		@FXML
		private Button GOSearch;
		@FXML
		private Button GOPurchase;
		@FXML
		private ListView<String> GOInventory;
	

	// import objects from file handler class
	FileHandler fileHandler = new FileHandler();
	ArrayList<Item> itemsList;

	// to create a results list to display
	final ObservableList<String> resultsList = FXCollections.observableArrayList();

	// to make a list of selectable type search items
	final ObservableList<String> typeSearchList = FXCollections.observableArrayList("Movie", "Book", "Figure",
			"BoardGame");

	// to make a list of selectable figure type items
	final ObservableList<String> figureTypeDropDownItems = FXCollections.observableArrayList("A", "D", "H");

	// to make a list of selectable category items
	final ObservableList<String> categoryDropDown = FXCollections.observableArrayList("Movie", "Book", "Figure",
			"BoardGame");

	// to load up the items file
	public storeGuiController() throws SecurityException, IOException {

		fileHandler = new FileHandler();
		itemsList = fileHandler.masterItemList();
	}

	// Event Listener on Button[#btnSearch].onAction
	@FXML
	public void search(ActionEvent event) {
		// TODO Autogenerated
		boolean SNisSelected = selectedSN.isSelected();
		boolean nameIsSelected = selectedName.isSelected();
		boolean typeIsSelected = selectedType.isSelected();

		if (SNisSelected) {
			resultsList.clear();
			ArrayList<Item> result = serialNumberSearch(targetSN.getText());
			resultsList.clear();

			for (Item it : result) {
				resultsList.add(it.toString());
			}
		} else if (nameIsSelected) {
			resultsList.clear();
			ArrayList<Item> result = itemNameSearch(targetName.getText());
			resultsList.clear();

			for (Item it : result) {
				resultsList.add(it.toString());
			}

		} else if (typeIsSelected) {
			resultsList.clear();
			ArrayList<Item> result = typeSearch(targetType.getValue());
			resultsList.clear();

			for (Item it : result) {
				resultsList.add(it.toString());
			}

		} else {
			JOptionPane.showMessageDialog(null, "Please select a search method");

		}
	}

	/**
	 * method to search the inventory based on the item SN
	 * 
	 * @param none
	 * @return none
	 *
	 */

	private ArrayList<Item> serialNumberSearch(String targetSN) {

		ArrayList<Item> resultList = new ArrayList<>();

		try {
			for (Item currentItem : itemsList) {
				if (currentItem.getSN().equals(targetSN)) {
					resultList.add(currentItem);
				}

			}
			// if item isnt found
			if (resultList.isEmpty()) {

				JOptionPane.showMessageDialog(null, "Item not found");

			}

		} catch (NumberFormatException e) {
			System.out.println("Wrong Serial Number ");
		}
		return resultList;

	}

	/**
	 * method to search the inventory based on the item name
	 * 
	 * @param none
	 * @return none
	 *
	 */
	public ArrayList<Item> itemNameSearch(String targetName) {

		ArrayList<Item> resultList = new ArrayList<>();

		try {
			for (Item currentItem : itemsList) {
				if (currentItem.getName().toLowerCase().contains(targetName.toLowerCase())) {
					resultList.add(currentItem);

				}

			}

			// if item isnt found
			if (resultList.isEmpty()) {

				JOptionPane.showMessageDialog(null, "Item not found");

			}
		} catch (Exception e) {
			System.out.println("Item not found");
		}
		return resultList;

	}

	/**
	 * method to search the inventory based on the item type
	 * 
	 * @param none
	 * @return none
	 *
	 */
	public ArrayList<Item> typeSearch(String targetType) {
		ArrayList<Item> resultList = new ArrayList<Item>();

		try {
			for (Item currentItem : itemsList) {

				if (currentItem.getClass().getSimpleName().equalsIgnoreCase(targetType)) {
					resultList.add(currentItem);
				}
			}
		} catch (Exception e) {
			System.out.println("Wrong type, try a different type");
		}
		return resultList;
	}

	// Event Listener on Button[#btnReset].onAction
	@FXML
	public void resetOptions(ActionEvent event) {

		typeGroup.getSelectedToggle().setSelected(false);
		targetName.clear();
		targetSN.clear();
		targetType.getSelectionModel().clearSelection();
	}

	// Event Listener on Button[#btnClearList].onAction
	@FXML
	public void clearItemResultsList(ActionEvent event) {
		resultsList.clear();
	}

	// Event Listener on Button[#btnPurchase].onAction
	@FXML
	public void purchaseItem(ActionEvent event) throws FileNotFoundException {

		String chosenItem = lvResults.getSelectionModel().getSelectedItem();

		String[] splitLine = chosenItem.split(";");
		String snum = splitLine[0];

		ArrayList<Item> matchingItems = serialNumberSearch(snum);

		Item toPurchase = matchingItems.get(0);

		int currentCount = toPurchase.getAvailableCount();

		toPurchase.setAvailableCount(currentCount - 1);

		resultsList.clear();

		resultsList.add(toPurchase.toString());
		// place in results list
		fileHandler.save(itemsList);
		JOptionPane.showMessageDialog(null, "Item Purchased!");

	}

	/**
	 * add Items code
	 * 
	 * @throws FileNotFoundException
	 */

	// Event Listener on Button[#saveBtn].onAction
	@FXML
	public void addItem(ActionEvent event) throws FileNotFoundException {
		addNewItem();
	}
	
	/**
	 * Allow user to search by Serial Number in the Remove Toy tab.
	 * 
	 * @param ActionEvent e - the action event passed in
	 *
	 */
	public void searchForRemove(ActionEvent e) {
		RTInventory.getItems().clear();
		
		try {
			// validate the input using validate method
			errorIsCaught = validate(RTSNTxt, "Serial Number", "SN");
			if (errorIsCaught) return;
			
			// search through the ArrayList<Toy> located in Toy Class
			for (Toy toy : Toy.toys) {
				// show the match result
				if (RTSNTxt.getText().equals(toy.getSN())) {
					RTInventory.getItems().add(toy.toString());
					break;
				}
			}
			
			// handle when no result is found but only when no error is caught beforehand
			if (!errorIsCaught && RTInventory.getItems().isEmpty()) {
				throw new NoResultFoundException();
				
			}
		} catch (NoResultFoundException e1) {
			JOptionPane.showMessageDialog(null, e1.getMessage());
		}
	}
	/**
	 * Allow user to remove toy after search.
	 * @param ActionEvent e - the action event passed in
	 * @return none
	 */
	public void remove(ActionEvent e) {
		try {
			if (!RTInventory.getSelectionModel().getSelectedItem().isEmpty()) {
				for (Toy toy : Toy.toys) {
					// iterate through the ArrayList<Toy> toys located in Toy Class
					if (RTSNTxt.getText().equals(toy.getSN())) {
						// prompt the user to confirm the remove action
						int result = JOptionPane.showConfirmDialog (null, "Are You Sure To Remove " + toy.getName() + 
								" (Serial Number: " + toy.getSN() + ")?",
								"Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
						// remove the toy if the user confirms
						if (result == JOptionPane.YES_OPTION) {
							Toy.toys.remove(toy);
							JOptionPane.showMessageDialog(null, toy.getName() + " Is Successfully Removed.");
							// clear the list
							RTInventory.getItems().clear();
						}
						break;
					}
				}
			}
		} catch (NullPointerException e1) {
			JOptionPane.showMessageDialog(null, "Please Select A Toy.");
		}
	}
	
	/**
	 * Allow user to search for suggested by entering at least two of the options.
	 * 
	 * @param ActionEvent e - the action event passed in
	 * @return none
	 */
	public void giftOptionSearch(ActionEvent e) {
		// clear the list before each search
				GOInventory.getItems().clear();

				errorIsCaught = false;
				
				// confirm at least two options (Check Box) are chosen
				int count = 0;
				if (ageCB.isSelected()) count++;
				if (typeCB.isSelected()) count++;
				if (priceRangeCB.isSelected()) count++;
				if (count < 2) {
					JOptionPane.showMessageDialog(null, "Please Choose At Least Two Option");
					return;
				}
				
				// validate Text Field age if selected
				if (ageCB.isSelected()) {
					errorIsCaught = validate(GOAgeTxt, "Age", "Integer");
					if (errorIsCaught) return;
				}
				
				// validate Minimum Price and Maximum Price
				if (priceRangeCB.isSelected()) {
					errorIsCaught = validate(minPriceTxt, "Minimum Price", "Double");
					if (errorIsCaught) return;
					errorIsCaught = validate(maxPriceTxt, "Maximum Price", "Double");
					if (errorIsCaught) return;
					try {
						// if the minimum price is bigger than the maximum price
						if (Double.parseDouble(minPriceTxt.getText()) > 
						Double.parseDouble(maxPriceTxt.getText())) {
							throw new MinBiggerThanMaxException();
						}
					} catch (MinBiggerThanMaxException e1) {
						JOptionPane.showMessageDialog(null, e1.getMessage());
						return;
					}
				}
				
				/*
				 * There were 4 scenario:
				 * 1. User chooses Age and Type
				 * 2. User chooses Age and Price Range
				 * 3. User chooses Type and Price Range
				 * 4. User chooses all Age, Type and Price Range
				 */
				
				// case 1
				if (ageCB.isSelected() && typeCB.isSelected() && !priceRangeCB.isSelected()) {
					// search through the ArrayList<Toy> toys located in Toy Class
					for (Toy toy : Toy.toys) {
						// make the simple name of BoardGame Class become "Board Game"
						String simpleName = toy.getClass().getSimpleName().replace("dG", "d G");
			
						if (Integer.parseInt(GOAgeTxt.getText()) >= toy.getAgeAppropriate() &&
								GOType.getSelectionModel().getSelectedItem().toString().equals(simpleName)) {
							GOInventory.getItems().add(toy.toString());
						}
					}
				}
				
				// case 2
				if (ageCB.isSelected() && priceRangeCB.isSelected() && !typeCB.isSelected()) {
					for (Toy toy : Toy.toys) {
						if (Integer.parseInt(GOAgeTxt.getText()) >= toy.getAgeAppropriate() &&
								Double.parseDouble(minPriceTxt.getText()) <= toy.getPrice() &&
								Double.parseDouble(maxPriceTxt.getText()) >= toy.getPrice()) {
							GOInventory.getItems().add(toy.toString());
						}
					}
				}
				
				// case 3
				if (typeCB.isSelected() && priceRangeCB.isSelected() && !ageCB.isSelected()) {
					for (Toy toy: Toy.toys) {
						// make the simple name of BoardGame Class become "Board Game"
						String simpleName = toy.getClass().getSimpleName().replace("dG", "d G");
						
						if (GOType.getSelectionModel().getSelectedItem().toString().equals(simpleName) &&
								Double.parseDouble(minPriceTxt.getText()) <= toy.getPrice() &&
								Double.parseDouble(maxPriceTxt.getText()) >= toy.getPrice()) {
							GOInventory.getItems().add(toy.toString());
						}
					}
				}
				
				// case 4
				if (ageCB.isSelected() && typeCB.isSelected() && priceRangeCB.isSelected()) {
					for (Toy toy: Toy.toys) {
						// make the simple name of BoardGame Class become "Board Game"
						String simpleName = toy.getClass().getSimpleName().replace("dG", "d G");
						
						if (Integer.parseInt(GOAgeTxt.getText()) >= toy.getAgeAppropriate() &&
								GOType.getSelectionModel().getSelectedItem().toString().equals(simpleName) &&
								Double.parseDouble(minPriceTxt.getText()) <= toy.getPrice() &&
								Double.parseDouble(maxPriceTxt.getText()) >= toy.getPrice()) {
							GOInventory.getItems().add(toy.toString());
						}
					}
				}
				
				// handle when no result is found but only when no error is caught beforehand
				try {
					if (!errorIsCaught && GOInventory.getItems().isEmpty()) {
						throw new NoResultFoundException();
					}
				} catch (NoResultFoundException e1) {
					JOptionPane.showMessageDialog(null, e1.getMessage());
					
				}
			}
			
	/**
	 * Allow user to buy the suggested gift.
	 * 
	 * @param ActionEvent e - the action event passed in
	 * @return none
	 */
	public void giftOptionPuchase(ActionEvent e) {
		try {
			// get the result (String) that user selects
			String userSelection = GOInventory.getSelectionModel().getSelectedItem().toString();
			// get the Serial Number using index of Number +8 to get the first digit and +18 to get the last digit
			String selectedSN = userSelection.substring(userSelection.indexOf("Number") + 8,
					userSelection.indexOf("Number") + 18);
			// search through the ArrayList<Toy> toys to see if there is any serial number match
			for (Toy toy : Toy.toys) {
				if (selectedSN.equals(toy.getSN())) {
					if (toy.getAvailableCount() > 0) {
						// deduct the available count
						toy.setAvailableCount(toy.getAvailableCount() - 1);
						JOptionPane.showMessageDialog(null, "You Have Successfully Purchase " + toy.getName() + ".\n" +
								"The Avaliable Count is " + toy.getAvailableCount() + " now.");
						GOInventory.getItems().clear();
						// update the items purchased
						GOInventory.getItems().add(toy.toString());
					} else {
						throw new NotEnoughAvailableCountException();
					}
				}
			}
		} catch (NotEnoughAvailableCountException e1) {
			JOptionPane.showMessageDialog(null, e1.getMessage());
		} catch (NullPointerException e1) {
			JOptionPane.showMessageDialog(null, "Please Select A Toy.");
		}
	}
	/**
	 * add Items code
	 * 
	 * @throws FileNotFoundException
	 */

	// Event Listener on Button[#saveBtn].onAction
	@FXML
	public void addItem(ActionEvent event) throws FileNotFoundException {
		addNewItem();
	}

	/**
	 * method to add an new item
	 * 
	 * @param none
	 * @return none
	 * @throws FileNotFoundException
	 *
	 */
	public void addNewItem() throws FileNotFoundException {
		boolean valid = true;

		if (itemCategoryComboBox.getValue().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Please select a category");
			valid = false;
		} else {
			// initialize variables
			String SN = null;
			String name = null;
			double price = 0;
			int availableCount = 0;
			int age = 0;
			char firstSnNumber = 0;

			if (addSN.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Please enter a Serial Numeber");
				valid = false;

			} else {
				SN = addSN.getText();
				firstSnNumber = SN.charAt(0);
			}
			// we have to validate the SN
			if (addName.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Please enter a name");
				valid = false;

			} else {
				name = addName.getText();
			}

			if (addPrice.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Please enter a Price");
				valid = false;
			} else {
				price = Double.parseDouble(addPrice.getText());
			}

			if (addAvailableCount.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Please enter the available count");
				valid = false;
			} else {
				availableCount = Integer.parseInt(addAvailableCount.getText());
			}

			if (addAgeAppropriate.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Please enter the approriate age");
				valid = false;
			} else {
				age = Integer.parseInt(addAgeAppropriate.getText());
			}
			if (!valid) {
				return;
			}
			// check for movies
			if (itemCategoryComboBox.getValue().equalsIgnoreCase("movie")) {

				// initialize variables
				String releaseYear = null;
				int rating = 0;
				try {
					// check if serial number is correct
					if (firstSnNumber != '4' && firstSnNumber != '5' && firstSnNumber != '6') {
						JOptionPane.showMessageDialog(null, "Serial Number must begin with 4, 5 or 6");

					}

					else {
						// check and avlidate each variable for movies
						if (addReleaseYear.getText().isEmpty()) {
							JOptionPane.showMessageDialog(null, "Please enter the release year");
							valid = false;

						} else {
							releaseYear = addReleaseYear.getText();
						}

						if (addRating.getText().isEmpty()) {
							JOptionPane.showMessageDialog(null, "Please enter a Rating");
							valid = false;

						} else {
							rating = Integer.parseInt(addRating.getText());
						}
						if (!valid) {
							return;
						}
						// create movie objetc and add to list
						Movie movie = new Movie(SN, name, price, availableCount, age, releaseYear, rating);
						itemsList.add(movie);
						fileHandler.save(itemsList);
						JOptionPane.showMessageDialog(null, "Movie Added!");
					}
				} catch (Exception e) {
					e.getMessage();
					System.out.println("Invalid Input. Please Enter a valid number");
				}

			}

			// check for books
			else if (itemCategoryComboBox.getValue().equalsIgnoreCase("book")) {
				// set the boolean for the radio button
				boolean fictionIsSelected = rbFiction.isSelected();
				boolean nonFicIsSelected = rbNonFiction.isSelected();

				// intitalize variabls
				String authors = null;
				String genre = null;
				String publication = null;

				if (firstSnNumber != '2' && firstSnNumber != '3') {
					JOptionPane.showMessageDialog(null, "Serial Number must begin with 2 or 3");
				} else {
					if (addAuthours.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please enter the Authors");
						valid = false;

					} else {
						authors = addAuthours.getText();
					}

					// to set genre

					if (fictionIsSelected) {
						genre = "F";
					} else if (nonFicIsSelected) {
						genre = "N";
					} else {
						JOptionPane.showMessageDialog(null, "Please select a genre");
						valid = false;
					}

					if (addPublication.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please enter the publication");
						valid = false;

					} else {
						publication = addPublication.getText();
					}
					if (!valid) {
						return;
					}

					// cretae new book object and add to list
					Book book = new Book(SN, name, authors, price, availableCount, age, genre, publication);
					itemsList.add(book);
					fileHandler.save(itemsList);
					JOptionPane.showMessageDialog(null, "Book Added!");
				}
			}

			// check for figure
			else if (itemCategoryComboBox.getValue().equalsIgnoreCase("figure")) {

				// initialize variables
				String figType = null;
				String brand = null;

				if (firstSnNumber != '0' && firstSnNumber != '1') {
					JOptionPane.showMessageDialog(null, "Serial Number must begin with 0 or 1");
				} else {

					if (figureTypeComboBox.getValue().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please Select a figure type");
						valid = false;

					} else {
						figType = figureTypeComboBox.getValue().toString();
					}

					if (addBrand.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please enter the brand");
						valid = false;

					} else {
						brand = addBrand.getText();
					}
					if (!valid) {
						return;
					}
					// create figure object
					Figure figure = new Figure(SN, name, brand, price, availableCount, age, figType);

					itemsList.add(figure);
					fileHandler.save(itemsList);
					JOptionPane.showMessageDialog(null, "Figure Added!");
				}
			}

			// check for board game
			else if (itemCategoryComboBox.getValue().equalsIgnoreCase("board game")) {

				// initialize variables
				String brand = null;
				int minPlayers = 0;
				int maxPlayers = 0;

				if (firstSnNumber != '7' && firstSnNumber != '8') {
					JOptionPane.showMessageDialog(null, "Serial Number must begin with 7 or 8");
				} else {

					if (addBrand.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please enter the brand");
						valid = false;

					} else {
						brand = addBrand.getText();
					}

					if (addMinPlayers.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please enter the Minimum Number of players");
						valid = false;

					} else {
						minPlayers = Integer.parseInt(addMinPlayers.getText());
					}

					if (addMaxPlayers.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Please enter the Maximum Number of players");
						valid = false;

					} else {
						maxPlayers = Integer.parseInt(addMaxPlayers.getText());
					}

					if (!valid) {
						return;
					}

					int totalP = maxPlayers - minPlayers;

					String numPlayers = String.valueOf(totalP);

					// create board game objetc and add to list
					BoardGame game = new BoardGame(SN, name, brand, price, availableCount, age, numPlayers, minPlayers,
							maxPlayers);

					itemsList.add(game);
					fileHandler.save(itemsList);
					JOptionPane.showMessageDialog(null, "Board Game Added!");
				}
			}
			if (!valid) {
				return;
			}
		}

	}
		/**
	 * Validate the user input in Text Field and print error message in JOptionPane accordingly.
	 * 
	 * @param textField - the Text Field that the user is on
	 * @param fieldName - the name of the Text Field
	 * @param type - can be "SN", "Text", "Integer", "Double"
	 * @return boolean - indicate if there is error caught or not
	 */
	public boolean validate(TextField textField, String fieldName, String type) {
		try {
			// validate empty input first
			if (textField.getText().isEmpty()) {
				throw new EmptyInputException();
			}
			if (type.equals("SN")) {
				// check if it is an integer, if not then a NumberFormatException is thrown
				Long.parseLong(textField.getText());
				
				// check if the SN is 10-digit long
				if (textField.getText().length() != 10) {
					throw new SerialNumberFormatException();
				}
			}
			if (type.equals("Double")) {
				// try to parse into double, if not then a NumberFormatException is thrown
				double userInput = Double.parseDouble(textField.getText());
				if (userInput <= 0) {
					throw new NegativeNumberException();
				}
			}
			if (type.equals("Integer")) {
				int userInput = Integer.parseInt(textField.getText());
				if (userInput <= 0) {
					throw new NegativeNumberException();
				}
			}
		} catch (EmptyInputException e1) {
			JOptionPane.showMessageDialog(null, fieldName + " Cannot Be Empty.");
			// return if the error is caught
			return true;
		} catch (NumberFormatException e1) {
			if (type.equals("Double")) {
				JOptionPane.showMessageDialog(null, fieldName + " Should Be Number Only.");
			} else {
				JOptionPane.showMessageDialog(null, fieldName + " Should Be Integer Only.");
			}
			// return if the error is caught
			return true;
		} catch (SerialNumberFormatException e1) {
			JOptionPane.showMessageDialog(null, e1.getMessage());
			// return if the error is caught
			return true;
		} catch (NegativeNumberException e1) {
			JOptionPane.showMessageDialog(null, fieldName + " Should Be Greater Than 0.");
			return true;
		}
		// return false if no error is caught
		return false;
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		lvResults.setItems(resultsList);

		// to set the type box

		targetType.setValue("Type");
		targetType.setItems(typeSearchList);

		// to set category select
		figureTypeComboBox.setValue(" ");
		figureTypeComboBox.setItems(figureTypeDropDownItems);

		// to set the category type box

		itemCategoryComboBox.setValue("");
		itemCategoryComboBox.setItems(categoryDropDown);
	}
}
