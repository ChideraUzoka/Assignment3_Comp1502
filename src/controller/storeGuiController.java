package controller;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import application.FileHandler;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ListView;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import mru.tsc.model.BoardGame;
import mru.tsc.model.Book;
import mru.tsc.model.Figure;
import mru.tsc.model.Item;
import mru.tsc.model.Movie;

public class storeGuiController implements Initializable {

	// homepage variables
	@FXML
	private ListView<String> lvResults;
	@FXML
	private RadioButton selectedSN;
	@FXML
	private RadioButton selectedName;
	@FXML
	private RadioButton selectedType;
	@FXML
	private TextField targetSN;
	@FXML
	private TextField targetName;
	@FXML
	private ComboBox<String> targetType;
	@FXML
	private Button btnSearch;
	@FXML
	private Button btnReset;
	@FXML
	private Button btnClearList;
	@FXML
	private Button btnPurchase;
	@FXML
	private ToggleGroup typeGroup;

	// add items page variables
	@FXML
	private TextField addSN;
	@FXML
	private TextField addName;
	@FXML
	private TextField addPrice;
	@FXML
	private TextField addAvailableCount;
	@FXML
	private TextField addAgeAppropriate;
	@FXML
	private ChoiceBox<String> itemCategoryComboBox;
	@FXML
	private TextField addBrand;
	@FXML
	private ComboBox classificationComboBox;
	@FXML
	private ComboBox<String> figureTypeComboBox;
	@FXML
	private TextField addMinPlayers;
	@FXML
	private TextField addMaxPlayers;
	@FXML
	private TextField addReleaseYear;
	@FXML
	private TextField addRating;
	@FXML
	private TextField addAuthours;
	@FXML
	private TextField addPublication;
	@FXML
	private RadioButton rbFiction;
	@FXML
	private RadioButton rbNonFiction;
	@FXML
	private Button saveBtn;
	@FXML
	private ToggleGroup genreGroup;

	// import objects from file handler class
	FileHandler fileHandler = new FileHandler();
	ArrayList<Item> itemsList;

	// to create a results list to display
	final ObservableList<String> resultsList = FXCollections.observableArrayList();

	// to make a list of selectable type search items
	final ObservableList<String> typeSearchList = FXCollections.observableArrayList("Movie", "Book", "Figure",
			"BoardGame");

	// to make a list of selectable figure type items
	final ObservableList<String> figureTypeDropDownItems = FXCollections.observableArrayList("A", "D", "H");

	// to make a list of selectable figure type items
	final ObservableList<String> categoryDropDown = FXCollections.observableArrayList("Movie", "Book", "Figure",
			"BoardGame");

	// to load up the items file
	public storeGuiController() throws SecurityException, IOException {

		fileHandler = new FileHandler();
		itemsList = fileHandler.masterItemList();
	}

	// Event Listener on Button[#btnSearch].onAction
	@FXML
	public void search(ActionEvent event) {
		// TODO Autogenerated
		boolean SNisSelected = selectedSN.isSelected();
		boolean nameIsSelected = selectedName.isSelected();
		boolean typeIsSelected = selectedType.isSelected();

		if (SNisSelected) {
			resultsList.clear();

			ArrayList<Item> result = serialNumberSearch(targetSN.getText());
			resultsList.clear();

			for (Item it : result) {
				resultsList.add(it.toString());
			}
		} else if (nameIsSelected) {
			resultsList.clear();
			ArrayList<Item> result = itemNameSearch(targetName.getText());
			resultsList.clear();

			for (Item it : result) {
				resultsList.add(it.toString());
			}

		} else if (typeIsSelected) {
			resultsList.clear();
			ArrayList<Item> result = typeSearch(targetType.getValue());
			resultsList.clear();

			for (Item it : result) {
				resultsList.add(it.toString());
			}

		} else {
			JOptionPane.showMessageDialog(null, "Please select a search method");

		}
	}

	/**
	 * method to search the inventory based on the item SN
	 * 
	 * @param none
	 * @return none
	 *
	 */

	private ArrayList<Item> serialNumberSearch(String targetSN) {

		ArrayList<Item> resultList = new ArrayList<>();

		try {
			for (Item currentItem : itemsList) {
				if (currentItem.getSN().equals(targetSN)) {
					resultList.add(currentItem);
				}

			}
			// if item isnt found
			if (resultList.isEmpty()) {

				JOptionPane.showMessageDialog(null, "Item not found");

			}

		} catch (NumberFormatException e) {
			System.out.println("Wrong Serial Number ");
		}
		return resultList;

	}

	/**
	 * method to search the inventory based on the item name
	 * 
	 * @param none
	 * @return none
	 *
	 */
	public ArrayList<Item> itemNameSearch(String targetName) {

		ArrayList<Item> resultList = new ArrayList<>();

		try {
			for (Item currentItem : itemsList) {
				if (currentItem.getName().toLowerCase().contains(targetName.toLowerCase())) {
					resultList.add(currentItem);

				}

			}

			// if item isnt found
			if (resultList.isEmpty()) {

				JOptionPane.showMessageDialog(null, "Item not found");

			}
		} catch (Exception e) {
			System.out.println("Item not found");
		}
		return resultList;

	}

	/**
	 * method to search the inventory based on the item type
	 * 
	 * @param none
	 * @return none
	 *
	 */
	public ArrayList<Item> typeSearch(String targetType) {
		ArrayList<Item> resultList = new ArrayList<Item>();

		try {
			for (Item currentItem : itemsList) {

				if (currentItem.getClass().getSimpleName().equalsIgnoreCase(targetType)) {
					resultList.add(currentItem);
				}
			}
		} catch (Exception e) {
			System.out.println("Wrong type, try a different type");
		}
		return resultList;
	}

	// Event Listener on Button[#btnReset].onAction
	@FXML
	public void resetOptions(ActionEvent event) {

		typeGroup.getSelectedToggle().setSelected(false);
		targetName.clear();
		targetSN.clear();
		targetType.getSelectionModel().clearSelection();
	}

	// Event Listener on Button[#btnClearList].onAction
	@FXML
	public void clearItemResultsList(ActionEvent event) {
		resultsList.clear();
	}

	// Event Listener on Button[#btnPurchase].onAction
	@FXML
	public void purchaseItem(ActionEvent event) throws FileNotFoundException {

		String chosenItem = lvResults.getSelectionModel().getSelectedItem();

		String[] splitLine = chosenItem.split(";");
		String snum = splitLine[0];

		ArrayList<Item> matchingItems = serialNumberSearch(snum);

		Item toPurchase = matchingItems.get(0);

		int currentCount = toPurchase.getAvailableCount();

		toPurchase.setAvailableCount(currentCount - 1);

		resultsList.clear();

		resultsList.add(toPurchase.toString());
		// place in results list
		fileHandler.save(itemsList);
		JOptionPane.showMessageDialog(null, "Item Purchased!");

	}

	/** add Items code */

	// Event Listener on Button[#saveBtn].onAction
	@FXML
	public void addItem(ActionEvent event) {
		addNewItem();
	}

	/**
	 * method to add an new item
	 * 
	 * @param none
	 * @return none
	 *
	 */
	public void addNewItem() {

		String SN = addSN.getText();
		char firstSnNumber = SN.charAt(0);

		// we have to validate the SN
//		if (addName.getText().isEmpty()) {
//			JOptionPane.showMessageDialog(null, "Please enter a name");
//
//		} else {
		String name = addName.getText();
		// }

//		if (addPrice.getText().isEmpty()) {
//			JOptionPane.showMessageDialog(null, "Please enter a Price");
//
//		} else {
		double price = Double.parseDouble(addPrice.getText());
		// }

//		if (addAvailableCount.getText().isEmpty()) {
//			JOptionPane.showMessageDialog(null, "Please enter the available count");

		// } else {
		int availableCount = Integer.parseInt(addAvailableCount.getText());
		// }

//		if (addAgeAppropriate.getText().isEmpty()) {
//			JOptionPane.showMessageDialog(null, "Please enter the approriate age");

		// } else {
		int age = Integer.parseInt(addAgeAppropriate.getText());
		// }

		// check for movies
		if (itemCategoryComboBox.getValue().equalsIgnoreCase("movie")) {
			System.out.println(firstSnNumber);
			try {
				if (firstSnNumber != '4' || firstSnNumber != '5' || firstSnNumber != '6') {
					JOptionPane.showMessageDialog(null, "Serial Number must begin with 4, 5 or 6");
				}

				else {
//					if (addReleaseYear.getText().isEmpty()) {
//						JOptionPane.showMessageDialog(null, "Please enter a the release year");
//
//					} else {
					String releaseYear = addReleaseYear.getText();
					// }

					int rating = Integer.parseInt(addRating.getText());

					// create movie objetc and add to list
					Movie movie = new Movie(SN, name, price, availableCount, age, releaseYear, rating);
					itemsList.add(movie);
				}
			} catch (Exception e) {
				e.getMessage();
				System.out.println("Invalid Input. Please Enter a valid number");
			}

		}

		// check for books
		else if (itemCategoryComboBox.getValue().equalsIgnoreCase("book")) {
			boolean fictionIsSelected = rbFiction.isSelected();
			boolean nonFicIsSelected = rbNonFiction.isSelected();

			if (firstSnNumber != '2' || firstSnNumber != '3') {
				JOptionPane.showMessageDialog(null, "Serial Number must begin with 2 or 3");
			} else {

				String authors = addAuthours.getText();
				// to set genre
				String genre = null;

				if (fictionIsSelected) {
					genre = "F";
				} else if (nonFicIsSelected) {
					genre = "N";
				} else {
					JOptionPane.showMessageDialog(null, "Please select a genre");
				}

				String publication = addPublication.getText();

				// cretae new book object and add to list
				Book book = new Book(SN, name, authors, price, availableCount, age, genre, publication);
				itemsList.add(book);

				JOptionPane.showMessageDialog(null, "Book Added!");
			}
		}

		// check for figure
		else if (itemCategoryComboBox.getValue().equalsIgnoreCase("figure")) {

			if (firstSnNumber != '0' || firstSnNumber != '1') {
				JOptionPane.showMessageDialog(null, "Serial Number must begin with 0 or 1");
			} else {
				String figType = figureTypeComboBox.getValue().toString();

				String brand = addBrand.getText();

				// create figure object
				Figure figure = new Figure(SN, name, brand, price, availableCount, age, figType);

				itemsList.add(figure);
				JOptionPane.showMessageDialog(null, "Figure Added!");
			}
		}

		// check for board game
		else if (itemCategoryComboBox.getValue().equalsIgnoreCase("board game")) {

			if (firstSnNumber != '7' || firstSnNumber != '8') {
				JOptionPane.showMessageDialog(null, "Serial Number must begin with 7 or 8");
			} else {
				String brand = addBrand.getText();

				int minPlayers = Integer.parseInt(addMinPlayers.getText());

				int maxPlayers = Integer.parseInt(addMaxPlayers.getText());

				int totalP = maxPlayers - minPlayers;

				String numPlayers = String.valueOf(totalP);

				// create board game objetc and add to list
				BoardGame game = new BoardGame(SN, name, brand, price, availableCount, age, numPlayers, minPlayers,
						maxPlayers);

				itemsList.add(game);
				JOptionPane.showMessageDialog(null, "Board Game Added!");
			}
		}

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		lvResults.setItems(resultsList);

		// to set the type box

		targetType.setValue("Type");
		targetType.setItems(typeSearchList);

		// to set category select
		figureTypeComboBox.setValue(" ");
		figureTypeComboBox.setItems(figureTypeDropDownItems);

		// to set the type box

		itemCategoryComboBox.setValue("Type");
		itemCategoryComboBox.setItems(categoryDropDown);
	}
}
